{
  "name": "adc-pi-gpio",
  "version": "0.0.2",
  "description": "Using an ADC with a Pi",
  "repository": {
    "type": "git",
    "url": "git://github.com/xseignard/adcPi.git"
  },
  "main": "./adc-pi-gpio",
  "scripts": {
    "test": "make test"
  },
  "author": {
    "name": "Xavier Seignard",
    "email": "xavier.seignard@gmail.com"
  },
  "contributors": [
    {
      "name": "Vincent Kammerer",
      "email": "vkammerer@gmail.com"
    }
  ],
  "keywords": [
    "gpio",
    "pi-gpio",
    "raspberry",
    "pi",
    "adc"
  ],
  "license": "MIT",
  "homepage": "https://github.com/xseignard/adcPi",
  "bugs": {
    "url": "https://github.com/xseignard/adcPi/issues"
  },
  "dependencies": {
    "async": "~0.2.9",
    "pi-gpio": "~0.0.2",
    "underscore": "~1.5.1"
  },
  "devDependencies": {
    "sinon": "~1.7.3",
    "chai": "~1.7.0",
    "mocha": "~1.11.0",
    "jshint": "~2.1.3",
    "istanbul": "~0.1.37",
    "dox": "~0.4.3"
  },
  "readme": "# adc-pi-gpio [![Build Status](https://travis-ci.org/xseignard/adcPi.png?branch=master)](https://travis-ci.org/xseignard/adcPi) [![Dependency Status](https://gemnasium.com/xseignard/adcPi.png)](https://gemnasium.com/xseignard/adcPi)\n\nNode.js [Bit banging](http://en.wikipedia.org/wiki/Bit_banging) communication between ADC and the Raspberry Pi.\n\nLargely inspired by ladyada's script: [https://gist.github.com/ladyada/3151375](https://gist.github.com/ladyada/3151375).\n\n## Usage\n- install with `npm install adc-pi-gpio --save` \n- check the demo sample:\n\n```js\nvar ADC = require('../adc-pi-gpio'),\n\tconfig = {\n\t\ttolerance : 2,\n\t\tinterval : 300,\n\t\tchannels : [ 0 ],\n\t\tSPICLK: 12,\n\t\tSPIMISO: 16,\n\t\tSPIMOSI: 18,\n\t\tSPICS: 22\n\t};\n\nvar adc = new ADC(config);\n\nprocess.on('SIGTERM', function(){\n\tadc.close();\n});\nprocess.on('SIGINT', function(){\n\tadc.close();\n});\n\nadc.init();\n\nadc.on('ready', function() {\n    console.log('Pins ready, listening to channel');\n});\nadc.on('close', function() {\n\tconsole.log('ADC terminated');\n\tprocess.exit();\n});\nadc.on('change', function(data) {\n    console.log('Channel ' + data.channel + ' value is now ' + data.value + ' which in proportion is: ' + data.percent);\n});\n```\n## API\n\n  - [ADC()](#adc)\n  - [ADC.init()](#adcinit)\n  - [ADC.close()](#adcclose)\n  - [ADC.read())](#adcreadchannelnumbercallbackfunction)\n\n## ADC()\n\n  ADC class, that represents an instance of an ADC. \n  \n  Below is a code snippet that shows the configuration possibilities. \n  \n  The opts object is optional. And each key inside it too.\n  \n  The values shown there are the defaults fallback.\n  \n```js\nvar ADC = require('adc-pi-gpio'),\n  opts = {\n    tolerance : 2,\n    interval : 300,\n    channels : [0],\n    SPICLK: 12,\n    SPIMISO: 16,\n    SPIMOSI: 18,\n    SPICS: 22\n  };\nvar adc = new ADC(opts);\n```\n\n## ADC.init()\n\n  Init the pins that are used by the ADC and start reading on the defined ADC channels.\n\n## ADC.close()\n\n  Close the pins used by the ADC.\n\n## ADC.read(channel:Number, callback:function())\n\n  Read the value of the given ADC channel.\n",
  "readmeFilename": "README.md",
  "_id": "adc-pi-gpio@0.0.2",
  "dist": {
    "shasum": "72c2f457b588672444d950720f9b5f6a5ac1b40e",
    "tarball": "http://registry.npmjs.org/adc-pi-gpio/-/adc-pi-gpio-0.0.2.tgz"
  },
  "_from": "adc-pi-gpio@",
  "_npmVersion": "1.3.5",
  "_npmUser": {
    "name": "xavier.seignard",
    "email": "xavier.seignard@gmail.com"
  },
  "maintainers": [
    {
      "name": "xavier.seignard",
      "email": "xavier.seignard@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "72c2f457b588672444d950720f9b5f6a5ac1b40e",
  "_resolved": "https://registry.npmjs.org/adc-pi-gpio/-/adc-pi-gpio-0.0.2.tgz"
}
